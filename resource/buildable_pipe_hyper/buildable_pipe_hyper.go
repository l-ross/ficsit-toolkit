// Code generated by ../../gen/docs_json. DO NOT EDIT.

package BuildablePipeHyper

import (
	"fmt"
)

type FGBuildablePipeHyper struct {
	Name                               string
	ClassName                          string
	MAllowColoring                     bool
	MAttachmentPoints                  string
	MBuildEffectSpeed                  float64
	MCreateClearanceMeshRepresentation bool
	MDescription                       string
	MDisplayName                       string
	MExitOffset                        string
	MForceNetUpdateOnRegisterPlayer    bool
	MHideOnBuildEffectStart            bool
	MHighlightVector                   string
	MInteractingPlayers                string
	MIsUseable                         bool
	MMeshLength                        float64
	MShouldModifyWorldGrid             bool
	MShouldShowAttachmentPointVisuals  bool
	MShouldShowHighlight               bool
	MSkipBuildEffect                   bool
	MSnappedPassthroughs               string
	MSplineData                        string
	MToggleDormancyOnInteraction       bool
	MaxRenderDistance                  float64
}

var (
	PipeHyper = FGBuildablePipeHyper{
		Name:                               "PipeHyper",
		ClassName:                          "Build_PipeHyper_C",
		MAllowColoring:                     true,
		MAttachmentPoints:                  ``,
		MBuildEffectSpeed:                  0.000000,
		MCreateClearanceMeshRepresentation: true,
		MDescription: `Tubes for transporting FICSIT employees.
A Hypertube Entrance needs to be attached to power and enter a Hypertube system.`,
		MDisplayName:                      `Hypertube`,
		MExitOffset:                       `(X=0.000000,Y=0.000000,Z=0.000000)`,
		MForceNetUpdateOnRegisterPlayer:   false,
		MHideOnBuildEffectStart:           false,
		MHighlightVector:                  `(X=0.000000,Y=0.000000,Z=0.000000)`,
		MInteractingPlayers:               ``,
		MIsUseable:                        false,
		MMeshLength:                       100.000000,
		MShouldModifyWorldGrid:            true,
		MShouldShowAttachmentPointVisuals: false,
		MShouldShowHighlight:              false,
		MSkipBuildEffect:                  false,
		MSnappedPassthroughs:              ``,
		MSplineData:                       ``,
		MToggleDormancyOnInteraction:      false,
		MaxRenderDistance:                 -1.000000,
	}
)

func GetByClassName(className string) (FGBuildablePipeHyper, error) {
	if v, ok := ClassNameToDescriptor[className]; ok {
		return v, nil
	}

	return FGBuildablePipeHyper{}, fmt.Errorf("failed to find FGBuildablePipeHyper with class name %s", className)
}

var ClassNameToDescriptor = map[string]FGBuildablePipeHyper{
	"Build_PipeHyper_C": PipeHyper,
}
