// Code generated by ../../gen/docs_json. DO NOT EDIT.

package BuildablePipeHyper

import (
	"fmt"
)

type FGBuildablePipeHyper struct {
	Name                                    string
	ClassName                               string
	MAllowCleranceSeparationEvenIfStackedOn bool
	MBlockSharingMaterialInstanceMapping    bool
	MBuildEffectSpeed                       float64
	MDescription                            string
	MDisplayName                            string
	MExcludeFromMaterialInstancing          string
	MFogPlaneTransforms                     string
	MForceNetUpdateOnRegisterPlayer         bool
	MHideOnBuildEffectStart                 bool
	MHighlightVector                        string
	MInteractingPlayers                     string
	MIsUseable                              bool
	MMaterialNameToInstanceManager          string
	MMeshLength                             float64
	MShouldModifyWorldGrid                  bool
	MShouldShowHighlight                    bool
	MSkipBuildEffect                        bool
	MSplineData                             string
	MToggleDormancyOnInteraction            bool
	MaxRenderDistance                       float64
}

var (
	PipeHyper = FGBuildablePipeHyper{
		Name:                                    "PipeHyper",
		ClassName:                               "Build_PipeHyper_C",
		MAllowCleranceSeparationEvenIfStackedOn: false,
		MBlockSharingMaterialInstanceMapping:    false,
		MBuildEffectSpeed:                       0.000000,
		MDescription: `Tubes for transporting FICSIT employees.
A Hyper Tube Entrance needs to be attached to power and enter a Hyper Tube system.`,
		MDisplayName:                    `Hyper Tube`,
		MExcludeFromMaterialInstancing:  ``,
		MFogPlaneTransforms:             ``,
		MForceNetUpdateOnRegisterPlayer: false,
		MHideOnBuildEffectStart:         false,
		MHighlightVector:                `(X=0.000000,Y=0.000000,Z=0.000000)`,
		MInteractingPlayers:             ``,
		MIsUseable:                      false,
		MMaterialNameToInstanceManager:  `()`,
		MMeshLength:                     100.000000,
		MShouldModifyWorldGrid:          true,
		MShouldShowHighlight:            false,
		MSkipBuildEffect:                false,
		MSplineData:                     ``,
		MToggleDormancyOnInteraction:    false,
		MaxRenderDistance:               -1.000000,
	}
)

func GetByClassName(className string) (*FGBuildablePipeHyper, error) {
	if v, ok := classNameToVar[className]; ok {
		return v, nil
	}

	return nil, fmt.Errorf("failed to find FGBuildablePipeHyper with class name %s", className)
}

var classNameToVar = map[string]*FGBuildablePipeHyper{
	"Build_PipeHyper_C": &PipeHyper,
}
